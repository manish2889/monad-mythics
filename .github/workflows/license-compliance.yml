name: License Compliance Check

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  license-check:
    runs-on: ubuntu-latest
    name: License Compliance Verification
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Install License Checker
        run: npm install -g license-checker
        
      - name: Check Licenses
        id: license-check
        run: |
          echo "Checking licenses for compliance..."
          
          # Create license report
          license-checker --json --out licenses.json
          
          # Define allowed licenses
          ALLOWED_LICENSES=(
            "MIT"
            "Apache-2.0"
            "BSD-2-Clause"
            "BSD-3-Clause"
            "ISC"
            "CC0-1.0"
            "Unlicense"
            "WTFPL"
            "0BSD"
            "BlueOak-1.0.0"
            "Python-2.0"
          )
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES=(
            "GPL-2.0"
            "GPL-3.0"
            "LGPL-2.1"
            "LGPL-3.0"
            "AGPL-1.0"
            "AGPL-3.0"
            "CPAL-1.0"
            "EPL-1.0"
            "EPL-2.0"
            "MPL-1.1"
            "MPL-2.0"
            "CC-BY-SA-4.0"
            "UNLICENSED"
          )
          
          # Parse and validate licenses
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Version | License | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          COMPLIANCE_ISSUES=0
          
          # Process license report (simplified check)
          if grep -q "UNLICENSED" licenses.json; then
            echo "‚ùå Found UNLICENSED packages - license compliance failed"
            echo "Please review and update the following packages with proper licenses:"
            grep -n "UNLICENSED" licenses.json || true
            echo "compliance_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ $COMPLIANCE_ISSUES -eq 0 ]; then
            echo "‚úÖ All licenses are compliant" >> $GITHUB_STEP_SUMMARY
            echo "compliance_status=passed" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Found $COMPLIANCE_ISSUES license compliance issues" >> $GITHUB_STEP_SUMMARY
            echo "compliance_status=failed" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          retention-days: 30
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const complianceStatus = '${{ steps.license-check.outputs.compliance_status }}';
            
            let comment = '## üìÑ License Compliance Report\n\n';
            
            if (complianceStatus === 'passed') {
              comment += '‚úÖ **All licenses are compliant**\n\n';
              comment += 'No license compliance issues found in this PR.';
            } else {
              comment += '‚ö†Ô∏è **License compliance issues detected**\n\n';
              comment += 'Please review the license compliance report in the workflow artifacts.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Fail on License Issues
        if: steps.license-check.outputs.compliance_status == 'failed'
        run: |
          echo "License compliance issues found. Please review and resolve."
          exit 1
